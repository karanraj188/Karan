<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="workspace" elementType="Argument">
            <stringProp name="Argument.name">workspace</stringProp>
            <stringProp name="Argument.value">C:\Users\ADMIN\AppData\Local\Jenkins\.jenkins\workspace\Test3_GitHub</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="filewriter_path" elementType="Argument">
            <stringProp name="Argument.name">filewriter_path</stringProp>
            <stringProp name="Argument.value">C:/Users/ADMIN/AppData/Local/Jenkins/.jenkins/workspace/Test3_GitHub/ScriptAggregateReport/HTMLReportContent.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ResponseTimeSLA1" elementType="Argument">
            <stringProp name="Argument.name">ResponseTimeSLA1</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ResponseTimeSLA2" elementType="Argument">
            <stringProp name="Argument.name">ResponseTimeSLA2</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group_Script" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">60</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller_Script" enabled="false"/>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler_1" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler_2" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler_3" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler_4" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler_5" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${workspace}\ScriptAggregateReport\Test_18Mar22_1.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.listener.GraphsGeneratorListener guiclass="TestBeanGUI" testclass="kg.apc.jmeter.listener.GraphsGeneratorListener" testname="jp@gc - Graphs Generator" enabled="true">
          <boolProp name="aggregateRows">false</boolProp>
          <boolProp name="autoScaleRows">false</boolProp>
          <stringProp name="endOffset"></stringProp>
          <stringProp name="excludeLabels"></stringProp>
          <boolProp name="excludeSamplesWithRegex">false</boolProp>
          <intProp name="exportMode">0</intProp>
          <stringProp name="filePrefix"></stringProp>
          <stringProp name="forceY"></stringProp>
          <stringProp name="granulation">1000</stringProp>
          <intProp name="graphHeight">600</intProp>
          <intProp name="graphWidth">800</intProp>
          <stringProp name="includeLabels"></stringProp>
          <boolProp name="includeSamplesWithRegex">false</boolProp>
          <stringProp name="limitRows">150</stringProp>
          <stringProp name="lineWeight"></stringProp>
          <stringProp name="lowCountLimit"></stringProp>
          <stringProp name="outputBaseFolder">${workspace}\ScriptAggregateReport</stringProp>
          <boolProp name="paintGradient">true</boolProp>
          <boolProp name="paintZeroing">true</boolProp>
          <boolProp name="preventOutliers">false</boolProp>
          <boolProp name="relativeTimes">false</boolProp>
          <stringProp name="resultsFileName">${workspace}\ScriptAggregateReport\Test_18Mar22_1.csv</stringProp>
          <stringProp name="startOffset"></stringProp>
          <stringProp name="successFilter"></stringProp>
        </kg.apc.jmeter.listener.GraphsGeneratorListener>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group_without color" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">60</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller_HMTL Report" enabled="true"/>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler_1" enabled="false">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA">${__FileToString(D:\Jenkins\Result_Aggregate\AggregateReportGui.csv,,)}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Res" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Res</stringProp>
              <stringProp name="RegexExtractor.regex">(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler_1" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA">${__FileToString(C:\Users\ADMIN\AppData\Local\Jenkins\.jenkins\workspace\Test3_GitHub\ScriptAggregateReport\AggregateReportGui.csv,,)}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Res" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Res</stringProp>
              <stringProp name="RegexExtractor.regex">(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler1" enabled="true">
            <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.*;

def s1 = &quot;&lt;!DOCTYPE html PUBLIC \&quot;-//W3C//DTD HTML 4.01 Transitional//EN\&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\&quot;Content-Type\&quot; content=\&quot;text/html; charset=UTF-8\&quot;&gt;&lt;title&gt;Load Test Results&lt;/title&gt;&lt;style type=\&quot;text/css\&quot;&gt;body{font:normal 68% verdana,arial,helvetica;color:#000}table tr td,table tr th{font-size:68%}table.details tr th{color:#fff;font-weight:700;text-align:center;background:#2674a6;white-space:nowrap}table.details tr td{background:#eeeee0;white-space:nowrap}h1{margin:0 0 5px;font:165% verdana,arial,helvetica}h2{margin-top:1em;margin-bottom:.5em;font:bold 125% verdana,arial,helvetica}h3{margin-bottom:.5em;font:bold 115% verdana,arial,helvetica}.Failure{font-weight:700;color:red}img{border-width:0}.expand_link{width:27px;top:1px;height:27px}.page_details{display:none}.page_details_expanded{display:block;display:table-row}&lt;/style&gt;&lt;script language=\&quot;JavaScript\&quot;&gt;function expand(e){document.getElementById(e).className=\&quot;page_details_expanded\&quot;}function collapse(e){document.getElementById(e).className=\&quot;page_details\&quot;}function change(e){document.getElementById(e+\&quot;_image\&quot;).src.match(\&quot;expand\&quot;)?(document.getElementById(e+\&quot;_image\&quot;).src=\&quot;collapse.png\&quot;,expand(e)):(document.getElementById(e+\&quot;_image\&quot;).src=\&quot;expand.png\&quot;,collapse(e))}&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Load Test Results&lt;/h1&gt;&lt;table width=\&quot;100%\&quot;&gt;&lt;tr&gt;&lt;td align=\&quot;left\&quot;&gt;Date report: ${__time(dd-MMM-yyyy,)}&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;hr size=\&quot;1\&quot;&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;table width=\&quot;95%\&quot; cellspacing=\&quot;2\&quot; cellpadding=\&quot;5\&quot; border=\&quot;0\&quot; class=\&quot;details\&quot; align=\&quot;center\&quot;&gt;&quot;

FileWriter f = new FileWriter(&quot;${filewriter_path}&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="TestPlan.comments">${Res_matchNr}   ${__groovy(${Res_matchNr}-1,)}</stringProp>
            <stringProp name="LoopController.loops">${Res_matchNr}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${Res_matchNr}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler2" enabled="true">
              <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.*;

def s1 = &quot;&quot;;

if(${Counter} == 1){
s1 = &quot;&lt;tr valign=\&quot;top\&quot;&gt;&lt;th&gt;${__V(Res_${Counter}_g1)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g2)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g3)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g5)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g6)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g8)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g9)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g10)}&lt;/th&gt;&lt;/tr&gt;&quot;;
}
else{
s1 = &quot;&lt;tr valign=\&quot;top\&quot; class=\&quot;\&quot;&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g1)}&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g2)}&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g3)}&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g5)} ms&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g6)} ms&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g8)} ms&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g9)} ms&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g10)}&lt;/td&gt;&lt;/tr&gt;&quot;;
}

FileWriter f = new FileWriter(&quot;${filewriter_path}&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();


</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3" enabled="true">
            <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.*;

def s1 = &quot;&lt;/table&gt;&lt;hr align=\&quot;center\&quot; width=\&quot;95%\&quot; size=\&quot;1\&quot;&gt;&quot;

FileWriter f = new FileWriter(&quot;${filewriter_path}&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__groovy(${Res_matchNr}-2,)}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">2</stringProp>
              <stringProp name="CounterConfig.end">${__groovy(${Res_matchNr}-1,)}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(${__V(Res_${Counter}_g5)} &gt; 450 || &quot;${__V(Res_${Counter}_g10)}&quot; != &quot;0.00%&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler4" enabled="true">
                <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.*;

def s1 = &quot;&lt;h2&gt;Failed Transcations&lt;/h2&gt;&lt;table width=\&quot;95%\&quot; cellspacing=\&quot;2\&quot; cellpadding=\&quot;5\&quot; border=\&quot;0\&quot; class=\&quot;details\&quot; align=\&quot;center\&quot;&gt;&quot;;

FileWriter f = new FileWriter(&quot;${filewriter_path}&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler5" enabled="true">
                <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.*;

def s1 = &quot;&lt;tr valign=\&quot;top\&quot;&gt;&lt;th&gt;${Res_1_g1}&lt;/th&gt;&lt;th&gt;${Res_1_g2}&lt;/th&gt;&lt;th&gt;${Res_1_g3}&lt;/th&gt;&lt;th&gt;${Res_1_g5}&lt;/th&gt;&lt;th&gt;${Res_1_g6}&lt;/th&gt;&lt;th&gt;${Res_1_g8}&lt;/th&gt;&lt;th&gt;${Res_1_g9}&lt;/th&gt;&lt;th&gt;${Res_1_g10}&lt;/th&gt;&lt;/tr&gt;&quot;;

FileWriter f = new FileWriter(&quot;${filewriter_path}&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">5</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__groovy(${Res_matchNr}-2,)}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">2</stringProp>
              <stringProp name="CounterConfig.end">${__groovy(${Res_matchNr}-1,)}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(${__V(Res_${Counter}_g5)} &gt; 450 || &quot;${__V(Res_${Counter}_g10)}&quot; != &quot;0.00%&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler6" enabled="true">
                <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.*;

def s1 = &quot;&quot;;

s1 = &quot;&lt;tr valign=\&quot;top\&quot; class=\&quot;\&quot;&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g1)}&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g2)}&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g3)}&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g5)} ms&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g6)} ms&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g8)} ms&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g9)} ms&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g10)}&lt;/td&gt;&lt;/tr&gt;&quot;;

FileWriter f = new FileWriter(&quot;${filewriter_path}&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();


</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler7" enabled="false">
            <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.*;

def s1 = &quot;&lt;/table&gt;&lt;hr align=\&quot;center\&quot; width=\&quot;95%\&quot; size=\&quot;1\&quot;&gt;&quot;

FileWriter f = new FileWriter(&quot;D:/Jenkins/Results/FileWriter/Res.txt&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group_with color" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller_HMTL Report" enabled="true"/>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler_1" enabled="false">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA">${__FileToString(D:\Jenkins\Result_Aggregate\AggregateReportGui.csv,,)}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Res" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Res</stringProp>
              <stringProp name="RegexExtractor.regex">(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler_1" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA">${__FileToString(C:\Users\ADMIN\AppData\Local\Jenkins\.jenkins\workspace\Test3_GitHub\ScriptAggregateReport\AggregateReportGui.csv,,)}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Res" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Res</stringProp>
              <stringProp name="RegexExtractor.regex">(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler1" enabled="true">
            <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.*;

def s1 = &quot;&lt;!DOCTYPE html PUBLIC \&quot;-//W3C//DTD HTML 4.01 Transitional//EN\&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\&quot;Content-Type\&quot; content=\&quot;text/html; charset=UTF-8\&quot;&gt;&lt;title&gt;Load Test Results&lt;/title&gt;&lt;style type=\&quot;text/css\&quot;&gt;body{font:normal 68% verdana,arial,helvetica;color:#000}table tr td,table tr th{font-size:80%}table.details tr th{color:#fff;font-weight:700;text-align:center;background:#2674a6;white-space:nowrap}table.details tr td{background:#eeeee0;white-space:nowrap}h1{margin:0 0 5px;font:165% verdana,arial,helvetica}h2{margin-top:1em;margin-bottom:.5em;font:bold 125% verdana,arial,helvetica}h3{margin-bottom:.5em;font:bold 115% verdana,arial,helvetica}.Failure{font-weight:700;color:red}.class1{font-weight:700;color:green}.class2{font-weight:700;color:#ffbf00}.class3{font-weight:700;color:red}img{border-width:0}.expand_link{width:27px;top:1px;height:27px}.page_details{display:none}.page_details_expanded{display:block;display:table-row}&lt;/style&gt;&lt;script language=\&quot;JavaScript\&quot;&gt;function expand(e){document.getElementById(e).className=\&quot;page_details_expanded\&quot;}function collapse(e){document.getElementById(e).className=\&quot;page_details\&quot;}function change(e){document.getElementById(e+\&quot;_image\&quot;).src.match(\&quot;expand\&quot;)?(document.getElementById(e+\&quot;_image\&quot;).src=\&quot;collapse.png\&quot;,expand(e)):(document.getElementById(e+\&quot;_image\&quot;).src=\&quot;expand.png\&quot;,collapse(e))}&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Load Test Results&lt;/h1&gt;&lt;table width=\&quot;100%\&quot;&gt;&lt;tr&gt;&lt;td align=\&quot;left\&quot;&gt;Date report: ${__time(dd-MMM-yyyy,)}&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;hr size=\&quot;1\&quot;&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;table width=\&quot;95%\&quot; cellspacing=\&quot;2\&quot; cellpadding=\&quot;5\&quot; border=\&quot;0\&quot; class=\&quot;details\&quot; align=\&quot;center\&quot;&gt;&quot;

FileWriter f = new FileWriter(&quot;${filewriter_path}&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="TestPlan.comments">${Res_matchNr}   ${__groovy(${Res_matchNr}-1,)}</stringProp>
            <stringProp name="LoopController.loops">${Res_matchNr}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${Res_matchNr}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler_color1" enabled="true">
              <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def class_avg = &quot;&quot;;
def class_90p = &quot;&quot;;
def class_95p = &quot;&quot;;
def class_min = &quot;&quot;;
def class_max = &quot;&quot;;
def class_error = &quot;&quot;;

if(${Counter} &gt; 1){
if(${__V(Res_${Counter}_g3)} &lt;= ${ResponseTimeSLA1}){
	class_avg = &quot;class1&quot;;
	vars.put(&quot;class_avg&quot;,class_avg);
	}else if(${__V(Res_${Counter}_g3)} &gt; ${ResponseTimeSLA1} &amp;&amp; ${__V(Res_${Counter}_g3)} &lt;= ${ResponseTimeSLA2}){
		class_avg = &quot;class2&quot;;
		vars.put(&quot;class_avg&quot;,class_avg);
		}else{
			class_avg = &quot;class3&quot;;
			vars.put(&quot;class_avg&quot;,class_avg);
			}
if(${__V(Res_${Counter}_g5)} &lt;= ${ResponseTimeSLA1}){
	class_90p = &quot;class1&quot;;
	vars.put(&quot;class_90p&quot;,class_90p);
	}else if(${__V(Res_${Counter}_g5)} &gt; ${ResponseTimeSLA1} &amp;&amp; ${__V(Res_${Counter}_g5)} &lt;= ${ResponseTimeSLA2}){
		class_90p = &quot;class2&quot;;
		vars.put(&quot;class_90p&quot;,class_90p);
		}else{
			class_90p = &quot;class3&quot;;
			vars.put(&quot;class_90p&quot;,class_90p);
			}
if(${__V(Res_${Counter}_g6)} &lt;= ${ResponseTimeSLA1}){
	class_95p = &quot;class1&quot;;
	vars.put(&quot;class_95p&quot;,class_95p);
	}else if(${__V(Res_${Counter}_g6)} &gt; ${ResponseTimeSLA1} &amp;&amp; ${__V(Res_${Counter}_g6)} &lt;= ${ResponseTimeSLA2}){
		class_95p = &quot;class2&quot;;
		vars.put(&quot;class_95p&quot;,class_95p);
		}else{
			class_95p = &quot;class3&quot;;
			vars.put(&quot;class_95p&quot;,class_95p);
			}
if(${__V(Res_${Counter}_g8)} &lt;= ${ResponseTimeSLA1}){
	class_min = &quot;class1&quot;;
	vars.put(&quot;class_min&quot;,class_min);
	}else if(${__V(Res_${Counter}_g8)} &gt; ${ResponseTimeSLA1} &amp;&amp; ${__V(Res_${Counter}_g8)} &lt;= ${ResponseTimeSLA2}){
		class_min = &quot;class2&quot;;
		vars.put(&quot;class_min&quot;,class_min);
		}else{
			class_min = &quot;class3&quot;;
			vars.put(&quot;class_min&quot;,class_min);
			}
if(${__V(Res_${Counter}_g9)} &lt;= ${ResponseTimeSLA1}){
	class_max = &quot;class1&quot;;
	vars.put(&quot;class_max&quot;,class_max);
	}else if(${__V(Res_${Counter}_g9)} &gt; ${ResponseTimeSLA1} &amp;&amp; ${__V(Res_${Counter}_g9)} &lt;= ${ResponseTimeSLA2}){
		class_max = &quot;class2&quot;;
		vars.put(&quot;class_max&quot;,class_max);
		}else{
			class_max = &quot;class3&quot;;
			vars.put(&quot;class_max&quot;,class_max);
			}
if(&quot;${__V(Res_${Counter}_g10)}&quot; != &quot;0.00%&quot;){
	class_error = &quot;class3&quot;;
	vars.put(&quot;class_error&quot;,class_error);
	}else{
			class_error = &quot;class1&quot;;
			vars.put(&quot;class_error&quot;,class_error);
			}
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler2" enabled="true">
              <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.*;

def s1 = &quot;&quot;;

if(${Counter} == 1){
s1 = &quot;&lt;tr valign=\&quot;top\&quot;&gt;&lt;th&gt;${__V(Res_${Counter}_g1)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g2)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g3)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g5)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g6)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g8)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g9)}&lt;/th&gt;&lt;th&gt;${__V(Res_${Counter}_g10)}&lt;/th&gt;&lt;/tr&gt;&quot;;
}
else{
s1 = &quot;&lt;tr valign=\&quot;top\&quot; class=\&quot;\&quot;&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g1)}&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g2)}&lt;/td&gt;&lt;td class=\&quot;${class_avg}\&quot; align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g3)}&lt;/td&gt;&lt;td class=\&quot;${class_90p}\&quot; align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g5)} ms&lt;/td&gt;&lt;td class=\&quot;${class_95p}\&quot; align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g6)} ms&lt;/td&gt;&lt;td class=\&quot;${class_min}\&quot; align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g8)} ms&lt;/td&gt;&lt;td class=\&quot;${class_max}\&quot; align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g9)} ms&lt;/td&gt;&lt;td class=\&quot;${class_error}\&quot; align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g10)}&lt;/td&gt;&lt;/tr&gt;&quot;;
}

FileWriter f = new FileWriter(&quot;${filewriter_path}&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3" enabled="true">
            <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.*;

def s1 = &quot;&lt;/table&gt;&lt;hr align=\&quot;center\&quot; width=\&quot;95%\&quot; size=\&quot;1\&quot;&gt;&quot;

FileWriter f = new FileWriter(&quot;${filewriter_path}&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__groovy(${Res_matchNr}-2,)}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">2</stringProp>
              <stringProp name="CounterConfig.end">${__groovy(${Res_matchNr}-1,)}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(${__V(Res_${Counter}_g5)} &gt; ${ResponseTimeSLA1} || &quot;${__V(Res_${Counter}_g10)}&quot; != &quot;0.00%&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler4" enabled="true">
                <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.*;

def s1 = &quot;&lt;h2&gt;Failed Transcations&lt;/h2&gt;&lt;table width=\&quot;95%\&quot; cellspacing=\&quot;2\&quot; cellpadding=\&quot;5\&quot; border=\&quot;0\&quot; class=\&quot;details\&quot; align=\&quot;center\&quot;&gt;&quot;;

FileWriter f = new FileWriter(&quot;${filewriter_path}&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler5" enabled="true">
                <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.*;

def s1 = &quot;&lt;tr valign=\&quot;top\&quot;&gt;&lt;th&gt;${Res_1_g1}&lt;/th&gt;&lt;th&gt;${Res_1_g2}&lt;/th&gt;&lt;th&gt;${Res_1_g3}&lt;/th&gt;&lt;th&gt;${Res_1_g5}&lt;/th&gt;&lt;th&gt;${Res_1_g6}&lt;/th&gt;&lt;th&gt;${Res_1_g8}&lt;/th&gt;&lt;th&gt;${Res_1_g9}&lt;/th&gt;&lt;th&gt;${Res_1_g10}&lt;/th&gt;&lt;/tr&gt;&quot;;

FileWriter f = new FileWriter(&quot;${filewriter_path}&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">5</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__groovy(${Res_matchNr}-2,)}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">2</stringProp>
              <stringProp name="CounterConfig.end">${__groovy(${Res_matchNr}-1,)}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(${__V(Res_${Counter}_g5)} &gt; ${ResponseTimeSLA1} || &quot;${__V(Res_${Counter}_g10)}&quot; != &quot;0.00%&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler_color2" enabled="true">
                <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def class_avg = &quot;&quot;;
def class_90p = &quot;&quot;;
def class_95p = &quot;&quot;;
def class_min = &quot;&quot;;
def class_max = &quot;&quot;;
def class_error = &quot;&quot;;

if(${Counter} &gt; 1){
if(${__V(Res_${Counter}_g3)} &lt;= ${ResponseTimeSLA1}){
	class_avg = &quot;class1&quot;;
	vars.put(&quot;class_avg&quot;,class_avg);
	}else if(${__V(Res_${Counter}_g3)} &gt; ${ResponseTimeSLA1} &amp;&amp; ${__V(Res_${Counter}_g3)} &lt;= ${ResponseTimeSLA2}){
		class_avg = &quot;class2&quot;;
		vars.put(&quot;class_avg&quot;,class_avg);
		}else{
			class_avg = &quot;class3&quot;;
			vars.put(&quot;class_avg&quot;,class_avg);
			}
if(${__V(Res_${Counter}_g5)} &lt;= ${ResponseTimeSLA1}){
	class_90p = &quot;class1&quot;;
	vars.put(&quot;class_90p&quot;,class_90p);
	}else if(${__V(Res_${Counter}_g5)} &gt; ${ResponseTimeSLA1} &amp;&amp; ${__V(Res_${Counter}_g5)} &lt;= ${ResponseTimeSLA2}){
		class_90p = &quot;class2&quot;;
		vars.put(&quot;class_90p&quot;,class_90p);
		}else{
			class_90p = &quot;class3&quot;;
			vars.put(&quot;class_90p&quot;,class_90p);
			}
if(${__V(Res_${Counter}_g6)} &lt;= ${ResponseTimeSLA1}){
	class_95p = &quot;class1&quot;;
	vars.put(&quot;class_95p&quot;,class_95p);
	}else if(${__V(Res_${Counter}_g6)} &gt; ${ResponseTimeSLA1} &amp;&amp; ${__V(Res_${Counter}_g6)} &lt;= ${ResponseTimeSLA2}){
		class_95p = &quot;class2&quot;;
		vars.put(&quot;class_95p&quot;,class_95p);
		}else{
			class_95p = &quot;class3&quot;;
			vars.put(&quot;class_95p&quot;,class_95p);
			}
if(${__V(Res_${Counter}_g8)} &lt;= ${ResponseTimeSLA1}){
	class_min = &quot;class1&quot;;
	vars.put(&quot;class_min&quot;,class_min);
	}else if(${__V(Res_${Counter}_g8)} &gt; ${ResponseTimeSLA1} &amp;&amp; ${__V(Res_${Counter}_g8)} &lt;= ${ResponseTimeSLA2}){
		class_min = &quot;class2&quot;;
		vars.put(&quot;class_min&quot;,class_min);
		}else{
			class_min = &quot;class3&quot;;
			vars.put(&quot;class_min&quot;,class_min);
			}
if(${__V(Res_${Counter}_g9)} &lt;= ${ResponseTimeSLA1}){
	class_max = &quot;class1&quot;;
	vars.put(&quot;class_max&quot;,class_max);
	}else if(${__V(Res_${Counter}_g9)} &gt; ${ResponseTimeSLA1} &amp;&amp; ${__V(Res_${Counter}_g9)} &lt;= ${ResponseTimeSLA2}){
		class_max = &quot;class2&quot;;
		vars.put(&quot;class_max&quot;,class_max);
		}else{
			class_max = &quot;class3&quot;;
			vars.put(&quot;class_max&quot;,class_max);
			}
if(&quot;${__V(Res_${Counter}_g10)}&quot; != &quot;0.00%&quot;){
	class_error = &quot;class3&quot;;
	vars.put(&quot;class_error&quot;,class_error);
	}else{
			class_error = &quot;class1&quot;;
			vars.put(&quot;class_error&quot;,class_error);
			}
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler6" enabled="true">
                <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.*;

def s1 = &quot;&quot;;

s1 = &quot;&lt;tr valign=\&quot;top\&quot; class=\&quot;\&quot;&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g1)}&lt;/td&gt;&lt;td align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g2)}&lt;/td&gt;&lt;td class=\&quot;${class_avg}\&quot; align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g3)}&lt;/td&gt;&lt;td class=\&quot;${class_90p}\&quot; align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g5)} ms&lt;/td&gt;&lt;td class=\&quot;${class_95p}\&quot; align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g6)} ms&lt;/td&gt;&lt;td class=\&quot;${class_min}\&quot; align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g8)} ms&lt;/td&gt;&lt;td class=\&quot;${class_max}\&quot; align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g9)} ms&lt;/td&gt;&lt;td class=\&quot;${class_error}\&quot; align=\&quot;center\&quot;&gt;${__V(Res_${Counter}_g10)}&lt;/td&gt;&lt;/tr&gt;&quot;;

FileWriter f = new FileWriter(&quot;${filewriter_path}&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();


</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler7" enabled="false">
            <stringProp name="TestPlan.comments">${__V(A${N})}   ${__V(Res_${Counter}_g1)}</stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.*;

def s1 = &quot;&lt;/table&gt;&lt;hr align=\&quot;center\&quot; width=\&quot;95%\&quot; size=\&quot;1\&quot;&gt;&quot;

FileWriter f = new FileWriter(&quot;D:/Jenkins/Results/FileWriter/Res.txt&quot;,true);
f.append(s1+&quot;\n&quot;);
f.close();
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
